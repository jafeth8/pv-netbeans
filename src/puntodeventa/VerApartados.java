/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package puntodeventa;

import helpers.MetodosImprimir;
import helpers.sql.TablaApartados;
import helpers.sql.TablaDetalleApartados;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import puntodeventa.bd.ConexionBd;
import validaciones_comprobaciones.ValidacionesComprobaciones;

/**
 *
 * @author jafeth8
 */
public class VerApartados extends javax.swing.JDialog {
    public static VerApartados dialog = new VerApartados(new javax.swing.JFrame(), true);
    ConexionBd cc= ConexionBd.obtenerInstancia();
    Connection cn= cc.conexion();
    
    ValidacionesComprobaciones instanciaValidaciones=new ValidacionesComprobaciones();
    TablaApartados instanciaTablaApartados = new TablaApartados();
    TablaDetalleApartados instanciaTablaDetalleApartados=new TablaDetalleApartados();
    MetodosImprimir instanciaMetodosImprimir=new MetodosImprimir();
    
    
    /**
     * Creates new form VerApartados
     */
    public VerApartados(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        mostrarApartados("");
    }
    
    public void mostrarApartados(String nombreCliente) {
		
	Statement st=null;
	ResultSet rs=null;
    	DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Id apartado");
        modelo.addColumn("Fecha de Apartado");
        modelo.addColumn("Id Cliente");
        modelo.addColumn("Nombre");
       
        modelo.addColumn("Total de la compra");
        modelo.addColumn("Deuda");
       
        
        String sql="";
        if(nombreCliente.equals("")) {
            sql="SELECT id_apartado,fecha_de_apartado,fk_id_cliente,clientes.nombre,total,deuda FROM "
            + "apartados JOIN clientes ON apartados.fk_id_cliente=clientes.id_cliente WHERE apartados.estado='en deuda'";
        }else {
            sql="SELECT id_apartado,fecha_de_apartado,fk_id_cliente,clientes.nombre,total,deuda FROM apartados JOIN clientes ON apartados.fk_id_cliente=clientes.id_cliente "
            + "WHERE clientes.nombre LIKE '%"+nombreCliente+"%' AND apartados.estado='en deuda'";
        }

        String []datos = new String [6];
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            
            while(rs.next()){
            	
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=""+rs.getFloat(5);
                datos[5]=""+rs.getFloat(6);
                //datos[6]=rs.getString(7);
                modelo.addRow(datos);
               
            }
            table.setModel(modelo);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage(),"No se pudo mostrar apartados", HEIGHT);
        }finally {
            try {
                if(st!=null)st.close();
                if(rs!=null)rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        textFieldBusqueda = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnIngresarAbono = new javax.swing.JButton();
        btnVerRegistros = new javax.swing.JButton();

        jMenuItem1.setText("Cancelar o agregar mas productos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Apartados");

        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBuscar.setText("Filtrar por nombre del cliente: ");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        textFieldBusqueda.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setComponentPopupMenu(jPopupMenu1);
        scrollPane.setViewportView(table);

        btnIngresarAbono.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnIngresarAbono.setText("Ingresar abono");
        btnIngresarAbono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarAbonoActionPerformed(evt);
            }
        });

        btnVerRegistros.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnVerRegistros.setText("Ver registros");
        btnVerRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerRegistrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(textFieldBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnIngresarAbono)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnVerRegistros))
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(textFieldBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIngresarAbono)
                    .addComponent(btnVerRegistros))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        mostrarApartados(textFieldBusqueda.getText().toString());
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnIngresarAbonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarAbonoActionPerformed
        
        int fila=table.getSelectedRow();
        String entradaDineroRecibido,entradaCantidadAbono;
        
        boolean cantidadAbono=true,CantidadDineroRecibido=true,cantidadesCorrectas=true;
        int idApartado;//variable para ingresar a la tabla registro_apartados
        float dineroRecibido,abono,cambio;//variables para ingresar a la tabla registro_apartados
        String fecha=null;//variable para ingresar a la tabla registro_apartados
        
        PreparedStatement psRegistroApartados=null,psActualizarTotalAbono=null,psActualizarDeudaApartados=null
        ,psActualizarEstadoApartados=null,psFechaLiquidacion=null,psInsertVentas=null,psActualizarIdCliente=null,
        psDetalleVentas=null;
        ResultSet resulsetVentas=null;
        
        if(fila>=0){
            try {//  evita que se caiga la ejecucion si las entradas son nulas a causa de que se cierren los JOptionPane
                do{                    
                    int idApartadoAuxliar=Integer.parseInt(table.getValueAt(fila, 0).toString());//esta linea tiene que estar dentro del try catch ya que al no seleccionar ninguna fila el resultado sera null y lanzara un excepcion
                    do {
                        entradaDineroRecibido = JOptionPane.showInputDialog("Dinero recibido");
                    } while (instanciaValidaciones.validarEntradaApartados(entradaDineroRecibido) == false);

                    do {
                        entradaCantidadAbono = JOptionPane.showInputDialog("Cantidad que sera abonada");
                        if(instanciaValidaciones.isDouble(entradaCantidadAbono)) {
                                cantidadAbono=instanciaValidaciones.validarCantidadAbono(entradaCantidadAbono,idApartadoAuxliar);
                        }
                    } while (instanciaValidaciones.validarEntradaApartados(entradaCantidadAbono)==false || cantidadAbono==false);
                }while (instanciaValidaciones.entradasValidas(entradaDineroRecibido,entradaCantidadAbono)==false);
                
                float precioTotal;
                float abonoTotal;
                float updateAbonoTotal;
                float updateDeuda;
                						
                idApartado=Integer.parseInt(table.getValueAt(fila, 0).toString());
                int id_cliente=Integer.parseInt(table.getValueAt(fila, 2).toString());//variable para determinar el tipo de cliente que generara la compra
                abono=Float.parseFloat(entradaCantidadAbono);
                dineroRecibido=Float.parseFloat(entradaDineroRecibido);
                cambio=dineroRecibido-abono;
                fecha=LocalDate.now().toString();
                
                //desactivamos autocommit()
                try {
                    cn.setAutoCommit(false);
                }catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage(),"Error setAutocommit(false): puntodeventa (evento ingresar abono)",JOptionPane.WARNING_MESSAGE);
                }
                
                
                // insertTablaRegistroApartados
                psRegistroApartados = cn.prepareStatement("INSERT INTO registro_apartados"
                + "(fk_id_apartado,dinero_recibido,abono,cambio_entregado,fecha_abono) VALUES (?,?,?,?,?)");
                psRegistroApartados.setInt(1, idApartado);
                psRegistroApartados.setFloat(2, dineroRecibido);
                psRegistroApartados.setFloat(3, abono);
                psRegistroApartados.setFloat(4, cambio);
                psRegistroApartados.setString(5, fecha);
                psRegistroApartados.executeUpdate();
                
                precioTotal=instanciaTablaApartados.obtenerPrecioTotalTablaApartados(idApartado);
                abonoTotal=instanciaTablaApartados.obtenerTotalAbonoTablaApartados(idApartado);
                
                
                //actualizarTotalAbonoTablaApartados
                updateAbonoTotal=abonoTotal+abono;
                psActualizarTotalAbono = cn.prepareStatement("UPDATE apartados SET total_abono='"+updateAbonoTotal+"' WHERE id_apartado='"+idApartado+"'");
                psActualizarTotalAbono.executeUpdate();
                //actualizarDeudaTablaApartados
                updateDeuda=precioTotal-updateAbonoTotal;
                psActualizarDeudaApartados = cn.prepareStatement("UPDATE apartados SET deuda='"+updateDeuda+"' WHERE id_apartado='"+idApartado+"'");
                psActualizarDeudaApartados.executeUpdate();
                
                if(updateDeuda==0){
                    String fechaLiquidacion=LocalDate.now().toString();
                    //actualizarEstadoTablaApartados
                    psActualizarEstadoApartados = cn.prepareStatement("UPDATE apartados SET estado='"+"Pagado"+"' WHERE id_apartado='"+idApartado+"'");
                    psActualizarEstadoApartados.executeUpdate();
                    //actualizarFechaLiquidacionTablaApartados
                    psFechaLiquidacion = cn.prepareStatement("UPDATE apartados SET fecha_liquidacion='"+fecha+"' WHERE id_apartado='"+idApartado+"'");
                    psFechaLiquidacion.executeUpdate();
                    //insertVentas
                    psInsertVentas = cn.prepareStatement("INSERT INTO ventas"
                    + "(total_venta,fecha_venta,pago_del_cliente,cambio_del_cliente,tipo_venta) VALUES (?,?,?,?,?)",Statement.RETURN_GENERATED_KEYS);
                    psInsertVentas.setFloat(1, precioTotal);
                    psInsertVentas.setString(2, fechaLiquidacion);
                    psInsertVentas.setFloat(3, updateAbonoTotal);
                    psInsertVentas.setFloat(4, 0);
                    psInsertVentas.setString(5, "por apartado");
                    psInsertVentas.executeUpdate();
                    
                    int idVenta=0;
                    resulsetVentas=psInsertVentas.getGeneratedKeys();
                    if(resulsetVentas.next()){
                        idVenta=resulsetVentas.getInt(1);
                    }
                    /*
                    //int tipoCliente=operacion.obtenerIdTipoClienteTablaClientes(id_cliente);
                    se relaciona el id del cliente independentemente si es socio o normal
                    el objetivo es tener registro de las compras del cliente dichos registros deben ser vizulizados
                    en la tabla ventas y tablas relacioonadas
                    */
                   //actualizarIdClienteTablaVentas
                   psActualizarIdCliente = cn.prepareStatement("UPDATE ventas SET fk_id_cliente='"+id_cliente+"' WHERE id_venta='"+idVenta+"'");
                   psActualizarIdCliente.executeUpdate();
                   
                   String detalleApartados[][];
                   detalleApartados=instanciaTablaDetalleApartados.obtenerDatosDetalleApartados(idApartado);
                   for (int i = 0; i < detalleApartados.length; i++) {
                        String idProducto=detalleApartados[i][0];
                        String costoUnitario=detalleApartados[i][1];
                        String precioUnitario=detalleApartados[i][2];
                        String cantidad=detalleApartados[i][3];
                        String descuentoString=detalleApartados[i][4];

                        int idProductoInteger=Integer.parseInt(idProducto);
                        float costo_unitario=Float.parseFloat(costoUnitario);
                        float precioUnitarioFloat=Float.parseFloat(precioUnitario);
                        float cantidadFloat=Float.parseFloat(cantidad);
                        float descuento=Float.parseFloat(descuentoString);
                        
                        //insertDetalleVentas
                        psDetalleVentas = cn.prepareStatement("INSERT INTO detalle_ventas"
                        + "(fk_id_venta,fk_id_producto,costo_unitario,precio_unitario,cantidad,descuento) VALUES (?,?,?,?,?,?)");
    		        psDetalleVentas.setInt(1, idVenta);
    		        psDetalleVentas.setInt(2, idProductoInteger);
    		        psDetalleVentas.setFloat(3, costo_unitario);
    		        psDetalleVentas.setFloat(4, precioUnitarioFloat);
    		        psDetalleVentas.setFloat(5, cantidadFloat);
    		        psDetalleVentas.setFloat(6, descuento);
    		        psDetalleVentas.executeUpdate();
                    }
                    
                    JOptionPane.showMessageDialog(null,"Este Cliente ha completado los pagos :)");
                    
                }
                cn.commit();//completamos transaccion 
                
                JOptionPane.showMessageDialog(null,"operacion realizada correctamente");
                mostrarApartados("");
                JOptionPane.showMessageDialog(null, "El cambio es de: "+cambio+"");
                
                int option=JOptionPane.showConfirmDialog(null, "Desea imprimir el ticket de abono? ","mensaje", JOptionPane.YES_NO_OPTION);
                if(option==0){
                    instanciaMetodosImprimir.imprimirComprobanteApartados(table,String.valueOf(dineroRecibido), String.valueOf(abono), String.valueOf(cambio));
                }
            }catch (SQLException e) {
                
                e.printStackTrace();
                try {
                    cn.rollback();
                } catch (SQLException ex) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage(),"puntodeventa.VerApartados(evento ingresar abono): Error Rollback",JOptionPane.ERROR_MESSAGE);
                }
                JOptionPane.showMessageDialog(null,"intente nuevamente: "+e.getMessage(),"Error al ingresar Abono: ",JOptionPane.ERROR_MESSAGE);

            }catch(Exception e2){
                System.err.println("Exception: "+e2.getMessage());
            }finally{
                try {
                    /*
                    PreparedStatement psRegistroApartados,psActualizarTotalAbono,psActualizarDeudaApartados
                    ,psActualizarEstadoApartados,psFechaLiquidacion,psInsertVentas,psActualizarIdCliente,
                    psDetalleVentas;
                    ResultSet resulsetVentas;
                    */
                    cn.setAutoCommit(true);
                    if(psRegistroApartados!=null)psRegistroApartados.close();
                    if(psActualizarTotalAbono!=null)psActualizarTotalAbono.close();
                    if(psActualizarDeudaApartados!=null)psActualizarDeudaApartados.close();
                    if(psActualizarEstadoApartados!=null)psActualizarEstadoApartados.close();
                    if(psFechaLiquidacion!=null)psFechaLiquidacion.close();
                    if(psInsertVentas!=null)psInsertVentas.close();
                    if(psActualizarIdCliente!=null)psActualizarIdCliente.close();
                    if(psDetalleVentas!=null)psDetalleVentas.close();
                    if(resulsetVentas!=null)resulsetVentas.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, ex.getMessage(),"puntodeventa.VerApartados(evento ingresar abono): no se establecio"
                    + "setAutoCommit() en true o no se pudieron cerrar conexiones",JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
            
        }else{
            JOptionPane.showMessageDialog(null,"no selecciono ningun registro","Error",JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnIngresarAbonoActionPerformed

    private void btnVerRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerRegistrosActionPerformed
        
        int fila=table.getSelectedRow();
        if(fila>=0) {
            int id_apartado=Integer.parseInt(table.getValueAt(fila,0).toString());
            VerRegistrosApartados.idApartado=id_apartado;
            VerRegistrosApartados instanciaVerRegistrosApartados =new VerRegistrosApartados(null,true);
            instanciaVerRegistrosApartados.setVisible(true);

        }else {
                JOptionPane.showMessageDialog(null,"No selecciono ningun registro");
        }
    }//GEN-LAST:event_btnVerRegistrosActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        int fila=table.getSelectedRow();
        int id_Apartado=Integer.parseInt(table.getValueAt(fila,0).toString());
        DetalleApartados.idApartado=id_Apartado;
        DetalleApartados instancia =new DetalleApartados(null,true);
        instancia.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerApartados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerApartados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerApartados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerApartados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnIngresarAbono;
    private javax.swing.JButton btnVerRegistros;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane scrollPane;
    public static javax.swing.JTable table;
    private javax.swing.JTextField textFieldBusqueda;
    // End of variables declaration//GEN-END:variables
}
